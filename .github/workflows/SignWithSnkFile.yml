name: Sign with snk file

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: TimeChip_App.sln                      # Replace with your solution name, i.e. MyWpfApp.sln.
      Wap_Project_Directory: Verpackungsprojekt    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: Verpackungsprojekt\Verpackungsprojekt.wapproj                 # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Update Version Number
      id: UpdateVersion
      shell: pwsh
      run: |
        $manifest= [xml](get-content ".\Verpackungsprojekt\Package.appxmanifest")
        ${{vars.VERSION}}
        $versionold= "${{vars.VERSION}}" -split '\.'
        $versionend= [int]$versionold[3] += 1
        $version= -join($versionold[0],".",$versionold[1],".",$versionold[2],".",$versionend)
        $manifest.Package.Identity.Version = $version
        Write-Output "Version=$version" >> $Env:GITHUB_OUTPUT

        $manifest.Save(".\Verpackungsprojekt\Package.appxmanifest")
        $manifest.Package.Identity.Version
      
        
    - name: Edit Repo Version Variable
      run: |
        ${{steps.UpdateVersion.outputs.version}}
        gh variable set VERSION --body ${{steps.UpdateVersion.outputs.version}}
      env:
        GH_TOKEN: ${{secrets.API_TOKEN}}
        
      
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1
      
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /p:RestorePackagesConfig=true
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the snk
      run: |
        $snk_cert_byte = [System.Convert]::FromBase64String("${{ secrets.SNK_FILE }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.snk
        [IO.File]::WriteAllBytes("$certificatePath", $snk_cert_byte)

    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflowpfx.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }} /p:AppxBundle=$env:Appx_Bundle /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=GitHubActionsWorkflow.snk /p:AppxBundlePlatforms=$env:Appx_Bundle_Platforms
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3.1.2
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
