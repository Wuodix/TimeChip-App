# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content 'Verpackungsprojekt_TemporaryKey.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Sign with snk file

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        targetPlatform: [x64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: TimeChip_App.sln                      # Replace with your solution name, i.e. MyWpfApp.sln.
      Wap_Project_Directory: Verpackungsprojekt    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: Verpackungsprojekt\Verpackungsprojekt.wapproj                 # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      App_Packages_Archive: AppPackages.zip
      App_Packages_Directory: AppPackages
      Actions_Allow_Unsecure_Commands: true
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Update Version Number
      id: UpdateVersion
      shell: pwsh
      run: |
        $manifest= [xml](get-content ".\Verpackungsprojekt\Package.appxmanifest")
        ${{vars.VERSION}}
        $versionold= "${{vars.VERSION}}" -split '\.'
        $versionend= [int]$versionold[3] += 1
        $version= -join($versionold[0],".",$versionold[1],".",$versionold[2],".",$versionend)
        $manifest.Package.Identity.Version = $version
        Write-Output "Version=$version" >> $Env:GITHUB_OUTPUT

        $manifest.Save(".\Verpackungsprojekt\Package.appxmanifest")
        $manifest.Package.Identity.Version
      
        
    - name: Edit Repo Version Variable
      run: |
        ${{steps.UpdateVersion.outputs.version}}
        gh variable set VERSION --body ${{steps.UpdateVersion.outputs.version}}
      env:
        GH_TOKEN: ${{secrets.API_TOKEN}}

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1

    - name: Setup Dotnet
      uses: actions/setup-dotnet@v4.0.0
      with:
        dotnet-version: '8.0.x'
      
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application with msbuild
      run: msbuild $env:Wap_Project_Path /t:Restore /p:Configuration=$env:Configuration /p:RestorePackagesConfig=true /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: ${{ matrix.configuration }}
        RuntimeIdentifier: win-${{ matrix.targetplatform }}
        

    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:UapAppxPackageBuildMode=$env:BuildMode /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }} /p:AppxBundle=$env:Appx_Bundle /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=Verpackungsprojekt\key.snk /p:AppxBundlePlatforms=$env:Appx_Bundle_Platforms /p:PackageCertificateThumbprint=""
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86
        Build_Mode: SideloadOnly
        Configuration: ${{ matrix.configuration }}
        TargetPlatform: ${{matrix.targetPlatform}}
        
    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4.3.3
      with:
        # Artifact name
        name: MSIX Bundle
        # A file, directory or wildcard pattern that describes what to upload
        path: Verpackungsprojekt\AppPackages
